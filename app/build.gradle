plugins {
    id 'com.android.application'
    id 'kotlin-parcelize'
    id 'kotlin-android'
}

android {
    namespace 'com.xinbida.tsdd.demo'
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false


    defaultConfig {
        applicationId "com.xinbida.tsdd.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            abiFilters "armeabi-v7a", "arm64-v8a"
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    signingConfigs {
        debug {
            storeFile file("2023060789.jks")
            storePassword "775854"
            keyAlias "key0"
            keyPassword "775854"
        }

        release {
            storeFile file("2023060789.jks")
            storePassword "775854"
            keyAlias "key0"
            keyPassword "775854"
        }
    }




    buildTypes {
        release {
//            jniDebuggable true
//            zipAlignEnabled true   //Zipalign优化
//            minifyEnabled true  // 是否混淆
//            shrinkResources true  // 是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
//            jniDebuggable true
//            zipAlignEnabled true   //Zipalign优化
//            minifyEnabled true  // 是否混淆
//            shrinkResources true  // 是否去除无效的资源文件
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            def date = new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("GMT+08"))
            if (variant.buildType.name.equals('debug')) {
                outputFileName = "tangseng_debug.apk"
            }
            if (variant.buildType.name.equals('release')) {
                outputFileName = "tangseng-${defaultConfig.versionCode}-${defaultConfig.versionName}_${date}.apk"
            }
        }
    }




    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    api project(':wkbase')
    implementation project(path: ':wkuikit')
    implementation project(path: ':wklogin')
    implementation project(path: ':wkscan')
    implementation project(path: ':wkpush')
    testImplementation 'org.testng:testng:6.9.6'
    testImplementation 'org.testng:testng:6.9.6'
}